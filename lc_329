class Solution:
    
    def longestIncreasingPath(self, matrix) -> int:
        if not matrix:
            return 0
        
        self.directions = [(1,0),(-1,0),(0,1),(0,-1)]
        
        numRows = len(matrix)
        numCols = len(matrix[0])
        
        # set the scores grid filled with -1
        scores = [[-1 for _ in range(numCols)] for _ in range(numRows)]
        
        for row in range(numRows):
            for column in range(numCols):
                self.dfs(row, column, matrix, scores, numRows, numCols)
        
        max = 1
        for r in range(numRows):
            for c in range(numCols):
                if scores[r][c] > max:
                    max = scores[r][c]
    
        return max
    
    
    # i is the current row (y)
    # j is the current column (x)
    # matrix is the board
    # scores is the 2d cache array of longest increasing paths for each of the points
    def dfs(self, i, j, matrix, scores, numRows, numCols) -> int:
        if scores[i][j] != -1:
            return scores[i][j]
        
        scores[i][j] = 0
        result = 1
        for dir in self.directions:
            y, x = (i + dir[0]), (j + dir[1])
            if x < 0 or x >= numCols or y < 0 or y >= numRows or matrix[y][x] <= matrix[i][j]:
                continue    # go on to the next direction

            tr = self.dfs(y, x, matrix, scores, numRows, numCols) + 1
            result = max(result, tr)
        
        scores[i][j] = result
        
        return result


# set a 2d array filled with -1, pay attention to order
# scores = [[-1 for _ in range(numCols)] for _ in range(numRows)]
    
#   DFS TEMPLATE
# def dfs(self, i, j, matrix, visited, numRows, numCols) -> int:
# if visited:
#     # return or return a value
#   for dir in self.directions:
#     y, x = i + dir[0], j + dir[1]
#         if x < 0 or x >= numCols or y < 0 or y >= numRows or matrix[y][x] <= matrix[i][j] (or a condition you want to skip this round):
#            continue    # skip to the next direction
#         # do something like
#         visited[i][j] = True
#         # explore the next level like
#         self.dfs(y, x, matrix, visited, numRows, numCols)


